package com.pmar.kotlinlab.projecteuler

/**
 * @author Pavel Marchenko (Pavel.Marchenko@datart.com -- DataArt)
 */
class Problem2 : Problem<Long>() {
    override fun getProblemId() = 2

    override fun getProblemDesc() = """
        Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
        1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
        By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
        """.trimIndent()

    override fun solve(): Long {
        val generator = FibonacciSequenceGenerator()
        var currentFibonacciNumber = generator.next()
        var result = 0L
        while (currentFibonacciNumber < 4_000_000) {
            if (currentFibonacciNumber % 2 == 0L) {
                result += currentFibonacciNumber
            }
            currentFibonacciNumber = generator.next()

        }

        return result
    }

    class FibonacciSequenceGenerator {

        private var prevValue = -1L
        private var currentValue = 1L

        fun current() = currentValue

        fun next(): Long {
            val current = currentValue
            if (prevValue > 0) currentValue += prevValue
            prevValue = current
            return currentValue
        }
    }
}